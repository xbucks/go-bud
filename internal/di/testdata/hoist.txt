# Duo setup
go mod edit -replace gitlab.com/mnm/bud=$DUOC_DIR

# Run di
di -d='web.*Web' -o='gen/web/web.go' -hoist=true -e='web.*Request'

# Run go mod tidy
go mod tidy

# Test di
go test main_test.go

-- main_test.go --
package main_test

import (
  "testing"
  "gitlab.com/mnm/bud/is"
  "myapp.com/web"
  genweb "myapp.com/gen/web"
)

func Test(t *testing.T) {
  is := is.New(t)
  expect := `&web.Web{Session: &web.Session{Request: &web.Request{}, DB: &web.Postgres{Log: &web.Log{value: "log", Env: &web.Env{value: "env"}}}}, Log: &web.Log{value: "log", Env: &web.Env{value: "env"}}}`
  request := &web.Request{}
  env := web.NewEnv()
  log := web.NewLog(env)
  pg := &web.Postgres{log}
  // request and dependencies that don't rely on request
  // get hoisted up.
  actual := genweb.Load(log, pg, request)
  is.Value(actual, expect)
}

-- go.mod --
module myapp.com

require (
  gitlab.com/mnm/bud v0.0.0
)

-- web/web.go --
package web

var env = ""

func NewEnv() *Env {
  env += "env"
  return &Env{env}
}

type Env struct {
  value string
}

func NewLog(env *Env) *Log {
  return &Log{"log", env}
}

type Log struct {
  value string
  *Env
}

type Postgres struct {
  Log *Log
}

type Request struct {}

type Session struct {
  *Request
  DB *Postgres
}

// Web struct
type Web struct {
  *Session
  *Log
}

