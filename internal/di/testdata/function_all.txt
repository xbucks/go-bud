-- input.json --
{
  "dependencies": [
    {
      "import": "myapp.com/web",
      "type": "*Web"
    }
  ],
  "target": "gen/web"
}

-- expect.txt --
&web.Web{
        r: &router.Router{},
        c: &controller.Map{
                pages: &pages.Controller{log: &log.Log{
                        e: &env.Env{},
                }},
                users: &users.Controller{
                        db: &db.DB{
                                env: &env.Env{},
                                log: &log.Log{e: &env.Env{}},
                        },
                        log: &log.Log{e: &env.Env{}},
                },
        },
}

-- main.go --
package main

import (
  "os"
  "fmt"
  "github.com/hexops/valast"
  "myapp.com/gen/web"
)

func main() {
  actual, err := web.Load()
  if err != nil {
    fmt.Fprintf(os.Stderr, "%s\n", err)
    return
  }
  fmt.Fprintf(os.Stdout, "%s\n", valast.String(actual))
}

-- go.mod --
module myapp.com

require (
  github.com/hexops/valast v1.4.1
)

-- env/env.go --
package env

// New env
func New() (*Env, error) {
  return &Env{}, nil
}

// Env struct
type Env struct {
  LogLevel    string
  PostgresURL string
}

-- log/log.go --
package log

import (
  "myapp.com/env"
)

// Log struct
type Log struct {
  e *env.Env
}

// New Log
func New(e *env.Env) (*Log, error) {
  return &Log{e}, nil
}

-- router/router.go --
package router

// New router
func New() *Router {
  return &Router{}
}

// Router struct
type Router struct {
}

-- db/db.go --
package db

import (
  "myapp.com/env"
  "myapp.com/log"
)

// New fn
func New(e *env.Env, log *log.Log) (*DB, error) {
  return &DB{e, log}, nil
}

// DB Struct
type DB struct {
  env  *env.Env
  log  *log.Log
}

-- controllers/users/controller.go --
package users

import (
  "myapp.com/db"
  "myapp.com/log"
)

// New controller
func New(db *db.DB, log *log.Log) *Controller {
  return &Controller{db, log}
}

// Controller struct
type Controller struct {
  db *db.DB
  log *log.Log
}

-- controllers/pages/controller.go --
package pages

import (
  "myapp.com/log"
)

// New controller
func New(log *log.Log) *Controller {
  return &Controller{log}
}

// Controller struct
type Controller struct {
  log *log.Log
}

-- controller/controller.go --
package controller

import (
  "myapp.com/controllers/pages"
  "myapp.com/controllers/users"
)

// New controller map
func New(pages *pages.Controller, users *users.Controller) *Map {
  return &Map{pages, users}
}

// Map of controllers
type Map struct {
  pages *pages.Controller
  users *users.Controller
}

-- web/web.go --
package web

import (
  "myapp.com/controller"
  "myapp.com/router"
)

// New web
func New(r *router.Router, c *controller.Map) *Web {
  return &Web{r, c}
}

// Web struct
type Web struct {
  r *router.Router
  c *controller.Map
}

