# Duo setup
go mod edit -replace gitlab.com/mnm/bud=$DUOC_DIR

# Run di
di -d='env.*Env' -o='gen/env/env.go'
di -d='log.Log' -o='gen/log/log.go' -e='env.*Env'
di -d='web.*Web' -o='gen/web/web.go' -e='env.*Env' -e='log.Log'

# Run go mod tidy
go mod tidy

# Test di
go test main_test.go

-- main_test.go --
package main_test

import (
  "testing"
  "gitlab.com/mnm/bud/is"
  "myapp.com/gen/env"
  "myapp.com/gen/log"
  "myapp.com/gen/web"
)

func Test(t *testing.T) {
  is := is.New(t)
  expect := `&web.Web{Log: &log.log{env: &env.Env{}}}`
  env := env.Load()
  log := log.Load(env)
  actual := web.Load(log)
  is.Value(actual, expect)
}

-- go.mod --
module myapp.com

require (
  gitlab.com/mnm/bud v0.0.0
)

-- input.json --
[
  {
    "dependencies": [
      {
        "import": "myapp.com/web",
        "type": "*Web"
      }
    ],
    "externals": [
    ],
    "target": "myapp.com/gen/web"
  }
]

-- expect.txt --
&web.Web{m: web.Middleware{
  v: "v",
}}

-- main.go --
package main

import (
  "os"
  "fmt"
  "github.com/hexops/valast"
  genenv "myapp.com/gen/env"
  genlog "myapp.com/gen/log"
  genweb "myapp.com/gen/web"
)

func main() {
  env := genenv.Load()
  log := genlog.Load(env)
  actual := genweb.Load(log)
  fmt.Fprintf(os.Stdout, "%s\n", valast.String(actual))
}

-- go.mod --
module myapp.com

require (
  github.com/hexops/valast v1.4.1
)

-- env/env.go --
package env

type Env struct {
}

-- log/log.go --
package log

import (
  "myapp.com/env"
)

type Log interface {
  Info(s string)
}

type log struct {
  env *env.Env
}

func (l *log) Info(s string) {}

func Default(env *env.Env) Log {
  return &log{env}
}

-- web/web.go --
package web

import (
  "myapp.com/log"
)

type Web struct {
  log.Log
}

