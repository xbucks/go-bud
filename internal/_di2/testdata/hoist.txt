-- input.json --
{
  "dependencies": [
    {
      "import": "myapp.com/web",
      "type": "*Web"
    }
  ],
  "externals": [
    {
      "import": "myapp.com/web",
      "type": "*Request"
    }
  ],
  "hoist": true,
  "target": "myapp.com/gen/web"
}

-- expect.txt --
&web.Web{
  Session: &web.Session{
    Request: &web.Request{},
    DB: &web.Postgres{Log: &web.Log{
      value: "log",
      Env:   &web.Env{value: "env"},
    }},
  },
  Log: &web.Log{
    value: "log",
    Env:   &web.Env{value: "env"},
  },
}

-- main.go --
package main

import (
  "os"
  "fmt"
  "github.com/hexops/valast"
  web "myapp.com/web"
  genweb "myapp.com/gen/web"
)

func main() {
  request := &web.Request{}
  env := web.NewEnv()
  log := web.NewLog(env)
  pg := &web.Postgres{log}
  // request and dependencies that don't rely on request
  // get hoisted up.
  actual := genweb.Load(log, pg, request)
  fmt.Fprintf(os.Stdout, "%s\n", valast.String(actual))
}

-- go.mod --
module myapp.com

require (
  github.com/hexops/valast v1.4.1
)

-- web/web.go --
package web

var env = ""

func NewEnv() *Env {
  env += "env"
  return &Env{env}
}

type Env struct {
  value string
}

func NewLog(env *Env) *Log {
  return &Log{"log", env}
}

type Log struct {
  value string
  *Env
}

type Postgres struct {
  Log *Log
}

type Request struct {}

type Session struct {
  *Request
  DB *Postgres
}

// Web struct
type Web struct {
  *Session
  *Log
}

