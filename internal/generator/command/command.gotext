package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func Run(args ...string) int {
	cmd, err := loadCommand()
	if err != nil {
		console.Error(err.Error())
		return 1
	}
	cli := commander.New("bud")
	cli.Run(cmd.Run)
	if err := cli.Parse(args); err != nil {
		if errors.Is(err, context.Canceled) {
			// Unfortunately interrupts like SIGINT trigger a non-zero exit code,
			// regardless of whether you do os.Exit(0) or not. We're going to use exit
			// code 3 to distinguish between non-zero exit codes so "bud run" can know
			// that we exited cleanly on an interrupt.
			return 3
		}
		console.Error(err.Error())
		return 1
	}
	return 0
}

type Command struct {
	Web *web.Server
}

func (c *Command) Run(ctx context.Context) error {
	console.Info("Listening on http://localhost:3000")
	return c.Web.ListenAndServe(ctx, ":3000")
}

func loadCommand() (*Command, error) {
	wd, err := os.Getwd()
	if err != nil {
		return nil, err
	}
	modFile, err := mod.Default().Find(wd)
	if err != nil {
		return nil, err
	}
	genFS := gen.New(os.DirFS(modFile.Directory()))
	genFS.Add(map[string]gen.Generator{
		"bud/plugin": gen.DirGenerator(&plugin.Generator{Modfile: modFile}),
	})
	jsVM := v8.New()
	tailwindTransform := tailwind.New(modFile)
	return provideCommand(genFS, jsVM, modFile, tailwindTransform)
}

// TODO: generate with DI
// go run main.go -C ../hackernews tool di -d="bud/command.*Command" -t="bud/command"  -e="gitlab.com/mnm/bud/gen".FS -e="gitlab.com/mnm/bud/go/mod.*File" -e "gitlab.com/mnm/bud/js".VM -e='"gitlab.com/mnm/bud-tailwind/transform/tailwind".*Transform'
func provideCommand(genFS gen.FS, jsVM js.VM, modFile *mod.File, tailwindTransform *tailwind.Transform) (*Command, error) {
	hnClient := hn.New()
	controllerController := &controller.Controller{HN: hnClient}
	svelteCompiler := svelte.New(jsVM)
	svelteTransformable := svelte.NewTransformable(svelteCompiler)
	transformTransformer, err := transform.PrivateLoad(svelteTransformable, tailwindTransform)
	if err != nil {
		return nil, err
	}
	viewServer := view.New(genFS, modFile, jsVM, transformTransformer)
	controller1Controller := controller1.New(controllerController, viewServer)
	hotServer := hot.New(genFS)
	publicMiddleware := public.New(genFS)
	routerRouter := router.New()
	webServer := web.New(controller1Controller, hotServer, publicMiddleware, routerRouter, viewServer)
	commandCommand := &Command{Web: webServer}
	return commandCommand, err
}
