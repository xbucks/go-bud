package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func Load(cmd *Command) *CLI {
	return &CLI{cmd}
}

type CLI struct {
	cmd *Command
}

func (c *CLI) Parse(args ...string) error {
	// $ bud run/build
	cmd := commander.New(`hn`)
	cmd.Run(c.cmd.Run)

	{ // $ hn deploy
		cmd := cmd.Command(`deploy`, `deploy your application`)
		cmd.Flag(`access-key`, `AWS access key`).String(&c.cmd.Deploy.AccessKey)
		cmd.Flag(`secret-key`, `AWS secret key`).String(&c.cmd.Deploy.SecretKey)
		cmd.Run(c.cmd.Deploy.Run)
	}

	{ // $ hn new
		cmd := cmd.Command(`new`, `new scaffolding`)
		cmd.Flag(`dry-run`, `include a dry run`).Bool(&c.cmd.New.DryRun)
		cmd.Run(c.cmd.Run)

		{ // $ new view
			cmd := cmd.Command(`view`, `new view`)
			cmd.Flag(`with-test`, `include a test`).Bool(&c.cmd.New.View.WithTest)
			cmd.Arg(`name`, `name of the view`).String(&c.cmd.New.View.Name)
			cmd.Run(c.cmd.Run)
		}
	}

	return cmd.Parse(args)
}

func LoadCommand(web *web.Server, deploy *DeployCommand, newc *NewCommand) *Command {
	cmd := &Command{
		web: web,
		Deploy: deploy,
		New: newc,
	}
	return cmd
}

// Command root
type Command struct {
	web    *web.Server
	Deploy *DeployCommand
	New    *NewCommand
}

func (c *Command) Run(ctx context.Context) error {
	console.Info("Listening on http://localhost:3000")
	return c.web.ListenAndServe(ctx, ":3000")
}

func LoadDeployCommand(vm *v8.Pool) *DeployCommand {
	return &DeployCommand{
		Command: &deploy.Command{VM: vm},
	}
}

type DeployCommand struct {
	*deploy.Command
}

func LoadNewCommand(vm *v8.Pool, view *NewViewCommand) *NewCommand {
	return &NewCommand{
		Command: &new.Command{V8: vm},
		View:    view,
	}
}

type NewCommand struct {
	*new.Command
	View *NewViewCommand
}

func LoadNewViewCommand() *NewViewCommand {
	return &NewViewCommand{
		Command: &new_view.Command{},
	}
}

type NewViewCommand struct {
	*new_view.Command
}
