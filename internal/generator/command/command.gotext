package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func Parse(args ...string) int {
	cli, err := Load()
	if err != nil {
		console.Error(err.Error())
		return 1
	}
	if err := cli.Parse(args...); err != nil {
		if errors.Is(err, context.Canceled) {
			// Unfortunately interrupts like SIGINT trigger a non-zero exit code,
			// regardless of whether you do os.Exit(0) or not. We're going to use exit
			// code 3 to distinguish between non-zero exit codes so "bud run" can know
			// that we exited cleanly on an interrupt.
			return 3
		}
		console.Error(err.Error())
		return 1
	}
	return 0
}

func Load() (*CLI, error) {
	wd, err := os.Getwd()
	if err != nil {
		return nil, err
	}
	modFinder := mod.New()
	module, err := modFinder.Find(wd)
	if err != nil {
		return nil, err
	}
	genFS := gen.New(os.DirFS(module.Directory()))
	genFS.Add(map[string]gen.Generator{
		"bud/plugin": gen.DirGenerator(&plugin.Generator{Module: module}),
	})
	cmd, err := load(genFS, module)
	if err != nil {
		return nil, err
	}
	return &CLI{cmd}, nil
}

{{ $.Provider.Function }}

type CLI struct {
	cmd *Command
}

func (c *CLI) Parse(args ...string) error {
	// $ bud run
	// $ bud build
	cmd := commander.New("app")
	cmd.Run(c.cmd.Run)

	{{/* { // $ bud deploy
		cmd := cmd.Command("deploy", "deploy to production")
		cmd.Flag("access-key", "aws access key").String(&c.cmd.deployCommand.AccessKey)
		cmd.Flag("secret-key", "aws secret key").String(&c.cmd.deployCommand.SecretKey)
		cmd.Run(c.cmd.deployCommand.Run)
	}

	{ // $ bud new
		cmd := cmd.Command("new", "new scaffolding")

		{ // $ bud new view
			cmd := cmd.Command("view", "create a new view")
			cmd.Arg("name", "name of the view").String(&c.cmd.newViewCommand.Name)
			cmd.Flag("with-test", "add a test").Bool(&c.cmd.newViewCommand.WithTest).Default(true)
			cmd.Run(c.cmd.newViewCommand.Run)
		}
	} */}}

	return cmd.Parse(args)
}

type Command struct {
	Web *web.Server
}

func (c *Command) Run(ctx context.Context) error {
	console.Info("Listening on http://localhost:3000")
	return c.Web.ListenAndServe(ctx, ":3000")
}
