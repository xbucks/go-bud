package web

// GENERATED. DO NOT EDIT.

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

// New web server
func New(
	router *router.Router,
	controller *action.Controller,
	hot *hot.Server,
	{{- if $.HasPublic }}
	public public.Middleware,
	{{- end }}
	{{- if $.HasView }}
	view *view.Server,
	{{- end }}
) *Server {
	// Action routing
	{{- range $action := $.Actions }}
	router.{{ $action.Method }}(`{{ $action.Route }}`, controller.{{ $action.CallName }})
	{{- end }}
	// Compose the middleware together
	middleware := middleware.Compose(
		{{- if $.HasPublic }}
		public,
		{{- end }}
		hot,
		{{- if $.HasPublic }}
		view,
		{{- end }}
		router,
	)
	// 404 at the bottom of the middleware
	handler := middleware.Middleware(http.NotFoundHandler())
	return &Server{handler}
}

type Server struct {
	http.Handler
}

func (s *Server) Serve(ctx context.Context, ln net.Listener) error {
	return web.Serve(ctx, ln, s)
}
