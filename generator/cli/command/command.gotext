package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func New(fsys *generator.FileSystem) *CLI {
	return &CLI{fsys}
}

type CLI struct {
	fsys *generator.FileSystem
}

func (c *CLI) Parse(ctx context.Context, args ...string) error {
	project := &project.Command{FS: c.fsys}
	cli := commander.New("cli")
	cli.Flag("chdir", "Change the working directory").Short('C').String(&project.Dir).Default(".")

	{ // cli run
		cmd := &run.Command{Project: project}
		cli := cli.Command("run", "run command")
		cli.Flag("embed", "embed assets").Bool(&cmd.Embed).Default(false)
		cli.Flag("hot", "hot reload").Bool(&cmd.Hot).Default(true)
		cli.Flag("minify", "minify assets").Bool(&cmd.Minify).Default(false)
		cli.Flag("port", "port to listen to").String(&cmd.Port).Default(":3000")
		cli.Run(cmd.Run)
	}

	{ // cli build
		cmd := &build.Command{Project: project}
		cli := cli.Command("build", "build command")
		cli.Flag("embed", "embed assets").Bool(&cmd.Embed).Default(false)
		cli.Flag("hot", "hot reload").Bool(&cmd.Hot).Default(true)
		cli.Flag("minify", "minify assets").Bool(&cmd.Minify).Default(false)
		cli.Run(cmd.Run)
	}

	return cli.Parse(ctx, args)
}
