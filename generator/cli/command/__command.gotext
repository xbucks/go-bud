package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func New(
	{{- range $cmd := $.Commands }}
	{{ $cmd.Full.Camel }}Command *{{ $cmd.Import.Name }}.Command,
	{{- end }}
) *CLI {
	return &CLI{
		{{- range $cmd := $.Commands }}
		{{ $cmd.Full.Camel }}Command,
		{{- end }}
	}
}

type CLI struct {
	{{- range $cmd := $.Commands }}
	{{ $cmd.Full.Camel }}Command *{{ $cmd.Import.Name }}.Command
	{{- end }}
}

func (*CLI) Parse(ctx context.Context, args ...string) error {
	panic("next step... project cli parsing")
	return nil
}

{{/*
package command

import (
	context "context"

	"app.com/command/migrate"

	"gitlab.com/mnm/bud/package/commander"
)

func New(
	migrate *migrate.Command,
) *CLI {
	return &CLI{migrate}
}

type CLI struct {
	migrate *migrate.Command
}

func (c *CLI) Parse(ctx context.Context, args ...string) error {
	cli := commander.New("cli")

	// migrate
	migrateCmd := cli.Command("migrate", "")

	// migrate new
	migrateNew := &migrateNew{cmd: c.migrate}
	migrateNewCmd := migrateCmd.Command("new", "")
	migrateNewCmd.Flag("table", "migration table").String(&migrateNew.flags.Table).Default("migrate")
	migrateNewCmd.Arg("name").String(&migrateNew.args.Name).Optional()
	migrateNewCmd.Run(migrateNew.Run)

	// migrate up
	migrateUp := new(migrateUp)
	migrateUpCmd := migrateCmd.Command("up", "")
	migrateUpCmd.Run(migrateUp.Run)

	return cli.Parse(ctx, args)
}

// func (c *CLI) migrateNew()

type migrateNew struct {
	cmd   *migrate.Command
	flags migrate.NewFlag
	args  struct {
		Name string
	}
}

func (c *migrateNew) Run(ctx context.Context) error {
	return c.cmd.New(ctx, &c.flags, &c.args.Name)
}

type migrateUp struct {
}

func (*migrateUp) Run(ctx context.Context) error {
	return nil
} */}}
