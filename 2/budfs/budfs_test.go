package budfs_test

import (
	"fmt"
	"io/fs"
	"testing"

	"gitlab.com/mnm/bud/internal/modcache"

	"gitlab.com/mnm/bud/2/budfs"
	"gitlab.com/mnm/bud/2/fscache"
	"gitlab.com/mnm/bud/2/genfs"
	"gitlab.com/mnm/bud/2/mod"
	"gitlab.com/mnm/bud/2/parser"

	"github.com/matryer/is"
	"gitlab.com/mnm/bud/vfs"
)

func TestBud(t *testing.T) {
	is := is.New(t)
	appDir := t.TempDir()
	err := vfs.Write(appDir, vfs.Map{
		"go.mod":            []byte(`module app.com`),
		"action/action.go":  []byte("package action"),
		"view/index.svelte": []byte("<h1>hello world</h1>"),
	})
	is.NoErr(err)
	fmap := fscache.New()
	bfs, err := Generator(appDir, fmap, modcache.Default())
	is.NoErr(err)
	code, err := fs.ReadFile(bfs, "action/action.go")
	is.NoErr(err)
	is.Equal(string(code), `package action`)
	code, err = fs.ReadFile(bfs, "action/action.go")
	is.NoErr(err)
	is.Equal(string(code), `package action`)
	code, err = fs.ReadFile(bfs, "bud/action/action.go")
	is.NoErr(err)
	is.Equal(string(code), `package action_action`)
	code, err = fs.ReadFile(bfs, "bud/action/action.go")
	is.NoErr(err)
	is.Equal(string(code), `package action_action`)
	fi, err := fs.Stat(bfs, "bud/action/action.go")
	is.NoErr(err)
	is.Equal(fi.Name(), "action.go")
	// code, err = fs.ReadFile(bfs, "bud/action/action.go")
	// is.NoErr(err)
	// is.Equal(string(code), `package action_action`)

	// bfs.Entry("")
	// fmt.Println(bfs)
}

type action struct {
	FS     fs.FS
	Parser *parser.Parser
}

// TODO: pass in the cache3 and remove fs
func (a *action) GenerateFile(_ genfs.F, file *genfs.File) error {
	fmt.Println("parsing...")
	pkg, err := a.Parser.Parse("action")
	if err != nil {
		return err
	}
	file.Write([]byte("package " + pkg.Name() + "_" + pkg.Name()))
	return nil
}

type web struct {
	FS fs.FS
}

func (w *web) GenerateFile(_ genfs.F, file *genfs.File) error {
	// fs.ReadFile()
	// file.Watch()
	return nil
}

func Generator(dir string, fmap *fscache.Cache, modCache *modcache.Cache) (*budfs.FS, error) {
	module, err := mod.Find(dir, mod.WithFSCache(fmap), mod.WithModCache(modCache))
	if err != nil {
		return nil, err
	}
	bfs, err := budfs.Load(fmap, module)
	if err != nil {
		return nil, err
	}
	generatorMap := Load(bfs, module)
	for path, generator := range generatorMap {
		bfs.Entry(path, generator)
	}
	return bfs, nil
}

// Generated
func load(
	action *action,
	web *web,
) Map {
	return Map{
		"bud/action/action.go": genfs.FileGenerator(action),
		"bud/web/web.go":       genfs.FileGenerator(web),
	}
}

type Map map[string]genfs.Generator

// Generated by DI
func Load(budfsFS *budfs.FS, modModule *mod.Module) Map {
	parserParser := parser.New(budfsFS, modModule)
	action := &action{budfsFS, parserParser}
	web := &web{budfsFS}
	return load(action, web)
}
