package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

// Load the CLI
func Load(_ *gomod.Module, processes *Processes) *CLI {
	return &CLI{processes}
}

type Processes struct {
}

type CLI struct {
	processes *Processes
}

{{- define "process" }}
{{- range $flag := $.Flags }}
cmd.Flag(`{{ $flag.Slug }}`, `{{ $flag.Help }}`).{{ $flag.Method }}(&c.m.{{ $.Full.Pascal }}Command.{{ $flag.Pascal }}){{ if $flag.Default }}.Default({{ $flag.Default }}){{ end }}
{{- end }}
{{- range $arg := $.Args }}
cmd.Arg(`{{ $arg.Slug }}`, `{{ $arg.Help }}`).{{ $arg.Method }}(&c.m.{{ $.Full.Pascal }}Command.{{ $arg.Pascal }}){{ if $arg.Default }}.Default({{ $arg.Default }}){{ end }}
{{- end }}
{{- if $.Runnable }}
cmd.Run(c.m.{{ $.Full.Pascal }}Command.Run)
{{ end }}
{{- range $sub := $.Subs }}

{ // $ {{ $.Name }} {{ $sub.Name }}
	cmd := cmd.Command(`{{ $sub.Name }}`, `{{ $sub.Help}}`)
	{{- template "process" $sub }}
}
{{- end }}
{{- end }}

func (c *CLI) Parse(args ...string) error {
	// $ bud run/build
	cmd := commander.New(`{{ $.Process.Slug }}`)
	{{- template "process" $.Process }}

	return cmd.Parse(args)
}
