package public

// GENERATED. DO NOT EDIT.

import (
	"errors"
	"io"
	"io/fs"
	"net/http"
	"path"
	"time"

	"gitlab.com/mnm/bud/pkg/middleware"
)

func New(fsys fs.FS) Middleware {
	{{- if $.Embed }}
	return embed(fsys)
	{{- else }}
	return reference(fsys)
	{{- end }}
}

func reference(fsys fs.FS) Middleware {
	return serve(http.FS(fsys), serveContent)
}

func embed(fsys fs.FS) Middleware {
	panic("embed not implemented yet")
	{{- range $file := $.Files }}
	// bfs.Entry(`{{ $file.Path }}`, nil)
	{{- end }}
	return serve(http.FS(fsys), serveGzipContent)
}

type Middleware = middleware.Middleware

{{/* func serveFrom(dir string) func(f gen.F, file *gen.File) error {
	return func(f gen.F, file *gen.File) error {
		path := strings.TrimPrefix(file.Path(), "bud/public/")
		code, err := fs.ReadFile(f, filepath.Join(dir, path))
		if err != nil {
			return err
		}
		file.Write(code)
		return nil
	}
} */}}

func serve(hfs http.FileSystem, serveContent func(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker)) Middleware {
	return middleware.Function(func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			urlPath := r.URL.Path
			if r.Method != http.MethodGet || path.Ext(urlPath) == "" {
				next.ServeHTTP(w, r)
				return
			}
			file, err := hfs.Open(path.Join("public", urlPath))
			if err != nil {
				if errors.Is(err, fs.ErrNotExist) {
					next.ServeHTTP(w, r)
					return
				}
				http.Error(w, err.Error(), 500)
				return
			}
			stat, err := file.Stat()
			if err != nil {
				http.Error(w, err.Error(), 500)
				return
			}
			if stat.IsDir() {
				next.ServeHTTP(w, r)
				return
			}
			serveContent(w, r, urlPath, stat.ModTime(), file)
		})
	})
}

func serveContent(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker) {
	http.ServeContent(w, req, name, modtime, content)
}

func serveGzipContent(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker) {
	header := w.Header()
	header.Add("Content-Encoding", "gzip")
	header.Add("Vary", "Accept-Encoding")
	http.ServeContent(w, req, name, modtime, content)
}

