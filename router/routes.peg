package router

type parser Peg {
  route *route
  segments []Segment
  key Key
  regexpKey *RegexpKey
  basicKey *BasicKey
  optionalKey *OptionalKey
  slash *Slash
  regexp *Regexp
  identifier *Identifier
  text *Text
}

Route <- FirstSegment Segment* End {
  p.route = &route{
    Segments: p.segments,
  }
  p.segments = nil
}

FirstSegment <- Slash {
  p.segments = append(p.segments, p.slash)
}

Segment <- OptionalKey { p.segments = append(p.segments, p.optionalKey); p.optionalKey = nil }
         / Slash { p.segments = append(p.segments, p.slash); p.slash = nil }
         / Escaped { p.segments = append(p.segments, p.text); p.text = nil }
         / Key { p.segments = append(p.segments, p.key); p.key = nil }
         / Text { p.segments = append(p.segments, p.text); p.text = nil }

OptionalKey <- Slash? Text? Key '?' {
  p.optionalKey = &OptionalKey{
    PrefixSlash: p.slash,
    PrefixText: p.text,
    Key: p.key,
  }
  p.slash = nil
  p.text = nil
  p.key = nil
}

Key <- RegexpKey { p.key = p.regexpKey; p.regexpKey = nil }
     / BasicKey { p.key = p.basicKey; p.basicKey = nil }

RegexpKey <- ':' Identifier Regexp {
  p.regexpKey = &RegexpKey{
    Name: p.identifier,
    Regexp: p.regexp,
  }
  p.identifier = nil
  p.regexp = nil
}

BasicKey <- ':' Identifier {
  p.basicKey = &BasicKey{Name: p.identifier}
  p.identifier = nil
}

Regexp <- '(' < [^)]+ > ')' {
  p.regexp = &Regexp{Value: text}
}

Identifier <- < [A-Za-z] [A-Za-z0-9]* > {
  p.identifier = &Identifier{Value: text}
}

Escaped <- '\\' < [:/] > {
  p.text = &Text{Value: text}
}

Text <- < [^:/]+ > {
  p.text = &Text{Value: text}
}

Slash <- '/' {
  p.slash = &Slash{}
}

End
  <- !.
